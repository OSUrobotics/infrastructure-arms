<launch>
<!-- Repurpose this launch file for just launching data manipulation nodes? 
     currently launches drawer robot and data manipulation nodes
-->

<arg name="sensor_data" default=""/>
<arg name="timestamp_data" default=""/>
<arg name="position" default="'0 0 0'"/>
<arg name="rotation" default="'0 0 0'"/>
<group ns="drawer">
<param name="tf_prefix" value="drawer" />
<!-- Convert xacro and put on parameter server -->
<!-- <param name="robot_description" command="$(find xacro)/xacro.py '$(find kinova_description)/urdf/drawer_model.xacro' position:=$(arg position) rotation:=$(arg rotation)"/> -->
<param name="robot_description" command="$(find xacro)/xacro.py '$(find infrastructure_raspi)/urdf/drawer_model.xacro' position:=$(arg position) rotation:=$(arg rotation)"/>


<node name="world_stp" pkg="tf" type="static_transform_publisher" args="-1 0 0 0 0 0 world drawer/world 100"/>

<!-- Spawn a robot into Gazebo -->
<!-- <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description_drawer -urdf -model robot" /> -->

<!-- source list is name of rostopic to retrieve joint angles from and updated the robotModel (drawer_updater.py provides the drawer_distance topic)
     For rosbag implementation: change the source list to whatever topic the rosbag publishes for the drawer distance values
-->
<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
    <rosparam param="source_list">["drawer_distance"]</rosparam>
</node>

<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen"  />

<node pkg="kinova_description" name="drawer_updater" type="drawer_updater.py" args="$(arg sensor_data) $(arg timestamp_data)" output="screen"/>

<!-- graph testing -->
<node pkg="kinova_description" name="data_plotter" type="data_plotter.py" output="screen"/>
<node pkg="kinova_description" name="data_intermediary" type="data_intermediary.py" output="screen"/>
</group>

</launch>
